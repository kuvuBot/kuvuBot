// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using kuvuBot.Data;
//
//    var legacyGuild = LegacyGuild.FromJson(jsonString);

namespace kuvuBot.Data
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LegacyGuild
    {
        [JsonProperty("greeting")]
        public bool Greeting { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("lang")]
        public string Lang { get; set; }

        [JsonProperty("logchannel")]
        public string Logchannel { get; set; }

        [JsonProperty("prefix")]
        public string Prefix { get; set; }

        [JsonProperty("showlvl", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodingChoiceConverter))]
        public bool? Showlvl { get; set; }

        [JsonProperty("users", NullValueHandling = NullValueHandling.Ignore)]
        public Users? Users { get; set; }
    }

    public partial class User
    {
        [JsonProperty("lvl")]
        public long Lvl { get; set; }

        [JsonProperty("lvlProm")]
        public long LvlProm { get; set; }

        [JsonProperty("xp")]
        public long Xp { get; set; }
    }

    public partial struct Users
    {
        public object[] AnythingArray;
        public Dictionary<string, User> UserMap;

        public static implicit operator Users(object[] AnythingArray) => new Users { AnythingArray = AnythingArray };
        public static implicit operator Users(Dictionary<string, User> UserMap) => new Users { UserMap = UserMap };
    }

    public partial class LegacyGuild
    {
        public static LegacyGuild[] FromJson(string json) => JsonConvert.DeserializeObject<LegacyGuild[]>(json, kuvuBot.Data.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LegacyGuild[] self) => JsonConvert.SerializeObject(self, kuvuBot.Data.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                UsersConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DecodingChoiceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return boolValue;
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    bool b;
                    if (Boolean.TryParse(stringValue, out b))
                    {
                        return b;
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            serializer.Serialize(writer, value);
            return;
        }

        public static readonly DecodingChoiceConverter Singleton = new DecodingChoiceConverter();
    }

    internal class UsersConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Users) || t == typeof(Users?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Dictionary<string, User>>(reader);
                    return new Users { UserMap = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<object[]>(reader);
                    return new Users { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Users");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Users)untypedValue;
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.UserMap != null)
            {
                serializer.Serialize(writer, value.UserMap);
                return;
            }
            throw new Exception("Cannot marshal type Users");
        }

        public static readonly UsersConverter Singleton = new UsersConverter();
    }
}
